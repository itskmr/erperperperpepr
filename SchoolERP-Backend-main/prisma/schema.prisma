generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SCHOOL
  TEACHER
  STUDENT
}

model Admin {
  id        Int       @id @default(autoincrement())
  fullName  String
  email     String    @unique
  password  String
  username  String    @default("unknown")
  role      Role      @default(ADMIN)
  phone     String    @default("0123456789") @db.VarChar(15) // Changed length to 15
  status    String    @default("active") // Added status field
  lastLogin DateTime? // Added lastLogin field
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model School {
  id          Int          @id @default(autoincrement())
  schoolName  String       @default("Unknown")
  email       String       @unique
  password    String
  username    String       @unique @default(cuid())
  code        String       @unique @default("SC000")
  address     String       @default("Not Provided")
  contact     BigInt       @default(0)
  phone       String       @default("0123456789") @db.VarChar(15)
  principal   String       @default("Unknown")
  image_url   String?      @db.Text
  established Int          @default(2000)
  affiliate   String?      // For school affiliation information
  affiliateNo String?      // New field for school affiliation number
  website     String?      // For school website
  role        Role         @default(SCHOOL)
  status      String       @default("active")
  lastLogin   DateTime?
  teachers    Teacher[]
  students    Student[]
  departments Department[]
  transferCertificates TransferCertificate[] 
  Registration Registration[]
  drivers     Driver[]
  buses       Bus[]
  routes      Route[]
  expenses    Expense[]
  timetables  Timetable[]  // Added timetables relation
  attendance  Attendance[] // Added attendance relation
  teacherAttendance TeacherAttendance[] @relation("SchoolTeacherAttendance")
  teacherDiaries TeacherDiary[] // Added teacher diaries relation
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Teacher {
  id               Int       @id @default(autoincrement())
  fullName         String    // Required
  email            String?   @unique // Made optional
  password         String?   // Made optional
  username         String?   @unique @default(cuid()) // Made optional
  phone            String?   @db.VarChar(15) // Made optional
  gender           String    // Required field
  dateOfBirth      DateTime? // Added date of birth field
  age              Int?      // Added age field
  
  // Professional details
  designation      String    @default("Teacher")
  qualification    String?   @db.Text  // Changed from education
  address          String?   @db.Text
  
  // Teaching details
  subjects         String?   @db.Text  // JSON string of subjects taught - made optional
  sections         String?   @db.Text  // JSON string of class and section combinations - made optional

  // Class incharge details
  isClassIncharge  Boolean   @default(false)
  inchargeClass    String?
  inchargeSection  String?
  
  // Additional details
  profileImage     String?   @db.Text
  joining_year     DateTime  @default(now())
  experience       String    @default("0")
  
  // New personal details
  religion         String?
  bloodGroup       String?
  maritalStatus    String?
  
  // Social media links
  facebook         String?
  twitter          String?
  linkedIn         String?
  
  // Documents
  documents        String?   @db.Text  // JSON string of document URLs
  
  // Salary and bank details
  joiningSalary    Float?
  accountHolderName String?
  accountNumber    String?
  bankName         String?
  bankBranch       String?
  
  // Status fields
  role             Role      @default(TEACHER)
  status           String    @default("active") 
  lastLogin        DateTime?
  
  // Relations
  schoolId         Int
  school           School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  attendance       Attendance[]
  teacherAttendance TeacherAttendance[] @relation("TeacherAttendanceRecords")
  timetables       Timetable[]
  teacherDiaries   TeacherDiary[] // Added teacher diaries relation
  
  // Timestamps
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  @@index([schoolId])
  @@index([isClassIncharge, inchargeClass, inchargeSection])
}

model Student {
  id               String   @id @default(uuid())
  // Student Information - Only these 3 fields are required
  branchName       String?
  fullName         String   // Required - Student name
  admissionNo      String   @unique // Required - Admission number
  email            String?  @unique // Optional
  emailPassword    String?  // Password for student email
  penNo            String?  // PEN Number field
  aadhaarNumber    String?  @db.VarChar(12) // Aadhaar number field - exactly 12 digits
  apaarId          String?  @db.VarChar(12) // Apaar ID field - exactly 12 digits
  studentId        String?
  dateOfBirth      DateTime? // Optional
  age              Int?     // Calculated age field
  gender           String?  // Optional
  bloodGroup       String?
  nationality      String?
  religion         String?
  category         String?
  caste            String?
  height           Float?   // Height in cm
  weight           Float?   // Weight in kg
  belongToBPL      Boolean  @default(false)
  disability       String?
  mobileNumber     String?  @db.VarChar(10) // Optional - exactly 10 digits
  emergencyContact String?
  loginEnabled     Boolean  @default(false)
  lastLogin        DateTime?
  isVerified       Boolean  @default(false)
  passwordResetToken String?
  passwordResetExpires DateTime?

  // // Parent Login Credentials
  // fatherLoginId    String?  @unique
  // fatherPassword   String?
  // motherLoginId    String?  @unique
  // motherPassword   String?

  // Document Verification Status
  documentsVerified Boolean @default(false)
  birthCertificateSubmitted Boolean @default(false)
  studentAadharSubmitted    Boolean @default(false)
  fatherAadharSubmitted     Boolean @default(false)
  motherAadharSubmitted     Boolean @default(false)
  tcSubmitted              Boolean @default(false)
  marksheetSubmitted       Boolean @default(false)

  // Document Paths (moved from Documents model)
  studentImagePath         String? @db.Text
  fatherImagePath          String? @db.Text
  motherImagePath          String? @db.Text
  guardianImagePath        String? @db.Text
  signaturePath            String? @db.Text
  parentSignaturePath      String? @db.Text
  fatherAadharPath         String? @db.Text
  motherAadharPath         String? @db.Text
  birthCertificatePath     String? @db.Text
  migrationCertificatePath String? @db.Text
  aadhaarCardPath          String? @db.Text
  familyIdPath             String? @db.Text
  affidavitCertificatePath String? @db.Text
  incomeCertificatePath    String? @db.Text
  addressProof1Path        String? @db.Text
  addressProof2Path        String? @db.Text
  academicRegistrationNo   String?
  transferCertificatePath  String? @db.Text
  markSheetPath            String? @db.Text
  fatherSignaturePath      String? @db.Text
  motherSignaturePath      String? @db.Text
  guardianSignaturePath    String? @db.Text

  // Previous School Information
  previousSchool    PreviousSchool?

  // Siblings Information
  siblings         Sibling[]

  // Office Use Information
  officeDetails    OfficeDetails?

  // Address fields - all optional
  houseNo        String?
  street         String? @db.Text
  city           String? // Optional
  state          String? // Optional
  pinCode        String?

  permanentHouseNo String?
  permanentStreet  String? @db.Text
  permanentCity    String?
  permanentState   String?
  permanentPinCode String?
  sameAsPresentAddress Boolean @default(false)

  // Parent information - Only father name is required
  fatherName     String   // Required - Father name
  fatherEmail    String?  @unique // Optional
  fatherEmailPassword String?   // Optional
  motherName     String?  // Optional
  motherEmail    String?  // Optional
  motherEmailPassword String?   // Optional

  // Relations
  schoolId      Int
  school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  parentInfo    ParentInfo?
  sessionInfo   SessionInfo?
  transportInfo TransportInfo?
  educationInfo EducationInfo?
  otherInfo     OtherInfo?
  studentTransport StudentTransport[]

  // Meta
  transferCertificates TransferCertificate[]
  role            Role      @default(STUDENT)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  attendance      Attendance[]

  @@index([admissionNo])
  @@index([email])
  @@index([mobileNumber])
  @@index([aadhaarNumber])
  // @@index([fatherLoginId])
  // @@index([motherLoginId])
}

model PreviousSchool {
  id            String   @id @default(uuid())
  schoolName    String
  class         String
  tcNumber      String?
  issueDate     DateTime?
  subjects      String?  @db.Text
  board         String?
  result        String?  // Pass/Fail
  obtainedMarks Float?
  maxMarks      Float?
  percentage    Float?
  
  // Relation to Student
  studentId     String   @unique
  student       Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Sibling {
  id            String   @id @default(uuid())
  admissionNo   String?
  name          String
  class         String?
  age           Int?
  
  // Relation to Student
  studentId     String
  student       Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model OfficeDetails {
  id            String   @id @default(uuid())
  admissionNo   String
  admissionDate DateTime
  admittedClass String
  receiptNo     String?
  paymentMode   String?
  paidAmount    Float?
  checkedBy     String?
  verifiedBy    String?
  approvedBy    String?
  
  // Relation to Student
  studentId     String   @unique
  student       Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

// Normalized tables to reduce row size

model ParentInfo {
  id                     Int     @id @default(autoincrement())
  // Father details
  fatherQualification    String?
  fatherOccupation       String?
  fatherContact          String?
  // fatherEmail            String?
  fatherAadhaarNo        String?
  fatherAnnualIncome     String?
  fatherIsCampusEmployee String? @default("no")

  // Mother details
  motherQualification    String?
  motherOccupation       String?
  motherContact          String?
  // motherEmail            String?
  motherAadhaarNo        String?
  motherAnnualIncome     String?
  motherIsCampusEmployee String? @default("no")

  // Guardian information
  guardianName           String?
  guardianAddress        String? @db.Text
  guardianContact        String?
  guardianEmail          String?
  guardianAadhaarNo      String?
  guardianOccupation     String?
  guardianAnnualIncome   String?

  // Relation
  studentId String   @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model SessionInfo {
  id            Int     @id @default(autoincrement())
  // Admit Session
  admitGroup    String?
  admitStream   String?
  admitClass    String  // Required - Class is mandatory for admission
  admitSection  String?
  admitRollNo   String?
  admitSemester String?
  admitFeeGroup String?
  admitHouse    String?
  admitDate     DateTime @default(now())

  // Current Session
  currentGroup    String?
  currentStream   String?
  currentClass    String?
  currentSection  String?
  currentRollNo   String?
  currentSemester String?
  currentFeeGroup String?
  currentHouse    String?

  // Previous School Information
  previousSchool String?  @db.Text

  // Relation
  studentId String   @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model TransportInfo {
  id              Int     @id @default(autoincrement())
  transportMode   String?
  transportArea   String?
  transportStand  String?
  transportRoute  String?
  transportDriver String?
  pickupLocation  String?
  dropLocation    String?

  // Relation
  studentId String   @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model EducationInfo {
  id                Int      @id @default(autoincrement())
  lastSchool        String?
  lastSchoolAddress String?  @db.Text
  lastTcDate        DateTime?
  lastClass         String?
  lastPercentage    String?
  lastAttendance    String?
  lastExtraActivity String?  @db.Text

  // Relation
  studentId String   @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model OtherInfo {
  id                Int      @id @default(autoincrement())
  belongToBPL       String?  @default("no")
  minority          String?  @default("no")
  disability        String?
  accountNo         String?
  bank              String?
  ifscCode          String?
  medium            String?
  lastYearResult    String?
  singleParent      String?  @default("no")
  onlyChild         String?  @default("no")
  onlyGirlChild     String?  @default("no")
  adoptedChild      String?  @default("no")
  siblingAdmissionNo String?
  transferCase      String?  @default("no")
  livingWith        String?
  motherTongue      String?
  admissionType     String?  @default("new")
  udiseNo           String?

  // Relation
  studentId String   @unique
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Department {
  id             Int      @id @default(autoincrement())
  departmentName String
  hOD            String
  faculty_count  Int
  description    String   @db.Text
  schoolId       Int
  school         School   @relation(fields: [schoolId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Fee {
  id              String   @id @default(uuid())
  admissionNumber String
  studentName     String
  fatherName      String // Added father's name field
  class           String
  section         String
  totalFees       Float
  amountPaid      Float
  feeAmount       Float
  paymentDate     DateTime
  paymentMode     String
  receiptNumber   String
  status          String // 'Paid', 'Pending', 'Partial'   // 'Paid', 'Pending', 'Partial'
  feeCategory     String? // Optional fee category field
  feeCategories   String?  @db.Text // Store array as JSON string in Text field

  // Discount fields
  discountType    String? // Type of discount (sibling_discount, full_payment_discount, etc.)
  discountAmount  Float?  @default(0) // Discount percentage value
  discountValue   Float?  @default(0) // Calculated discount amount in currency
  amountAfterDiscount Float? @default(0) // Amount to be paid after discount
  
  // School reference
  schoolId        Int?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Fee Structure models for managing class fee structures
model FeeStructure {
  id             String        @id @default(uuid())
  className      String
  description    String?       @db.Text
  schoolId       Int // To associate with a particular school
  categories     FeeCategory[]
  totalAnnualFee Float         @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model FeeCategory {
  id           String       @id @default(uuid())
  name         String       // Name of the fee category (e.g., "Tuition Fee", "Library Fee")
  amount       Float        // The fee amount
  frequency    String       // "Monthly", "Quarterly", "Yearly"
  description  String?      @db.Text
  structureId  String       // Foreign key to relate to a fee structure
  structure    FeeStructure @relation(fields: [structureId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model TransferCertificate {
  id                  Int       @id @default(autoincrement())
  // Student Information
  admissionNumber     String    
  fullName            String
  fatherName          String
  motherName          String
  dateOfBirth         DateTime
  nationality         String
  category            String
  dateOfAdmission     DateTime
  
  // Academic Information
  currentClass        String
  whetherFailed       WhetherFailed @default(No) // Enum for whether failed or not
  section             String
  rollNumber          String?
  examAppearedIn      ExamAppearedIn @default(School) // Enum for exam appeared in
  qualifiedForPromotion QualifiedStatus @default(Yes) // Enum for qualified status
  
  // Transfer Details
  reasonForLeaving    ReasonForLeaving // Enum for reason for leaving
  dateOfLeaving       DateTime
  lastAttendanceDate  DateTime
  toClass             String?
  classInWords        String?
  
  // Academic Performance
  maxAttendance       Int
  obtainedAttendance  Int
  subjectsStudied     String    @db.Text
  
  // Conduct Information
  generalConduct      ConductStatus // Enum for conduct status
  behaviorRemarks     String?   @db.Text
  
  // Financial Information
  feesPaidUpTo        DateTime
  tcCharge            Float     @default(0)
  feeConcession       FeeConcessionStatus? @default(None) // Enum for fee concession status
  
  // Activities and Games
  gamesPlayed         String?   @db.Text  // Stored as JSON string
  extraActivities     String?   @db.Text  // Stored as JSON string
  
  // School Details
  schoolId            Int
  school              School    @relation(fields: [schoolId], references: [id])
  issuedDate          DateTime  @default(now())
  tcNumber            String    @unique
  tcstatus            Int       @default(1) // 1=Issued, 2=Cancelled, 0=Draft
  
  // Relations
  studentId           String
  student             Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([admissionNumber])
  @@index([tcNumber])
  @@index([issuedDate])
}

// Enums for select fields
enum QualifiedStatus {
  Yes
  No
  NA
  Pass
  Fail
  Compartment
  AsperCBSEBoardResult
  AppearedinclassXExam
  AppearedinclassXIIExam
}

enum ReasonForLeaving {
  FamilyRelocation
  AdmissionInOtherSchool
  Duetolongabsencewithoutinformation
  FatherJobTransfer
  GetAdmissioninHigherClass
  GoingtoNativePlace
  ParentWill
  Passedoutfromtheschool
  Shiftingtootherplace
  TransferCase
  Other
}

enum ConductStatus {
  Excellent
  Good
  Satisfactory
  NeedsImprovement
  Poor
}

enum FeeConcessionStatus {
  None
  Partial
  Full
}

enum GamesPlayed {
  Football
  Cricket
  Swimming
  Basketball
  Kabaddi
  Volleyball
  Athlete
  Chess
  Badminton
}

enum ExtraCurricularActivities {
  ParticipateInStageShow
  ParticipateInSports
  ParticipateInDebate
  ParticipateInQuiz
  ParticipateInPainting
  ParticipateInSinging
  ParticipateInDancing
  ParticipateInOther
}

enum ExamAppearedIn {
  School
  Board
  NA
  CBSEBoard
  SchoolFailed
  SchoolPassed
  SchoolCompartment
  BoardPassed
  BoardFailed
  BoardCompartment
}

enum WhetherFailed {
  Yes
  No
  NA
  CBSEBoard
}

// Add new enum for attendance status
enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

// Add model for attendance tracking
model Attendance {
  id          Int              @id @default(autoincrement())
  date        DateTime
  status      AttendanceStatus
  notes       String?          @db.Text
  studentId   String
  student     Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacherId   Int
  teacher     Teacher          @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  schoolId    Int              // Added school ID for better data isolation
  school      School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  className   String           // Storing the class name directly instead of using class ID
  section     String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([date, studentId]) // Prevent duplicate attendance for same student on same date
  @@index([date, studentId])
  @@index([date, className])
  @@index([studentId, date])
  @@index([schoolId, date])
  @@index([schoolId, className, date])
}

// Teacher Attendance Model for tracking teacher daily attendance
model TeacherAttendance {
  id          Int              @id @default(autoincrement())
  date        DateTime         @db.Date // Only store date, not time
  status      AttendanceStatus // PRESENT, ABSENT, LATE
  notes       String?          @db.Text
  checkInTime DateTime?        // Optional check-in time
  checkOutTime DateTime?       // Optional check-out time
  workingHours Float?          // Calculated working hours
  
  // Relations
  teacherId   Int
  teacher     Teacher          @relation("TeacherAttendanceRecords", fields: [teacherId], references: [id], onDelete: Cascade)
  schoolId    Int              // Critical for multi-tenant isolation
  school      School           @relation("SchoolTeacherAttendance", fields: [schoolId], references: [id], onDelete: Cascade)
  
  // Audit fields
  markedByUserId Int?          // Who marked the attendance
  markedAt    DateTime         @default(now())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Constraints
  @@unique([date, teacherId]) // Prevent duplicate attendance for same teacher on same date
  @@index([date, teacherId])
  @@index([schoolId, date])
  @@index([schoolId, teacherId])
  @@index([teacherId, date])
}

model Registration {
  // student information - Only these 3 fields are required now (testDate made optional, formNo made required)
  registrationId      String  @id @default(uuid())
  fullName           String   // Required
  formNo             String   @unique // Required - changed from optional to required
  testDate           String?  // Optional - changed from required to optional
  regnDate           String   // Required (registration date)
  registerForClass   String   // Required
  
  // Optional student fields
  branchName         String?
  gender             String?
  dob                String?
  category           String?
  religion           String?
  admissionCategory  String?
  bloodGroup         String?
  transactionNo      String?
  singleParent       Boolean  @default(false)
  contactNo          String?
  studentEmail       String?
  address            String?
  city               String?
  state              String?
  pincode            String?
  studentAadharCardNo String?
  regnCharge         String?
  examSubject        String?
  paymentStatus      String?

  // Optional father Details
  fatherName             String?
  fatherMobileNo         String?
  smsAlert               Boolean  @default(false)
  fatherEmail            String?
  fatherAadharCardNo     String?
  isFatherCampusEmployee Boolean  @default(false)

  // Optional mother Details
  motherName         String?
  motherMobileNo     String?
  motherAadharCardNo String?

  // School Association
  schoolId           Int?
  school             School? @relation(fields: [schoolId], references: [id])
}


// Trip Model
model Trip {
  id            String    @id @default(uuid())
  date          DateTime
  startTime     String
  endTime       String
  status        String    @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, COMPLETED, CANCELLED, DELAYED
  startOdometer Float
  endOdometer   Float?
  notes         String?   @db.Text
  delayMinutes  Int       @default(0)
  
  // Relations
  busId         String
  bus           Bus       @relation(fields: [busId], references: [id], onDelete: Cascade)
  routeId       String
  route         Route     @relation(fields: [routeId], references: [id], onDelete: Cascade)
  driverId      String
  driver        Driver    @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([date, routeId])
  @@index([date, busId])
  @@index([date, driverId])
}

// Maintenance Model
model Maintenance {
  id           String    @id @default(uuid())
  busId        String
  date         DateTime
  type         String    // regular, repair, inspection
  description  String?   @db.Text
  cost         Float     @default(0)
  odometer     Float?
  nextDueDate  DateTime?
  completedBy  String?
  status       String    @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, COMPLETED
  
  // Relations
  bus          Bus       @relation(fields: [busId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([busId, date])
  @@index([status])
}

// Bus Model
model Bus {
  id                  String        @id @default(uuid())
  registrationNumber  String?       @unique // Already optional, but ensuring consistency
  make                String
  model               String
  year                Int?
  capacity            Int
  color               String?
  fuelType            String?
  purchaseDate        DateTime?
  insuranceExpiryDate DateTime?
  lastMaintenanceDate DateTime?
  lastInspectionDate  DateTime?
  currentOdometer     Float         @default(0)
  status              String        @default("ACTIVE") // ACTIVE, MAINTENANCE, INACTIVE
  notes               String?       @db.Text
  
  // School Association
  schoolId            Int?
  school              School?       @relation(fields: [schoolId], references: [id])
  
  // Relations
  driverId            String?
  driver              Driver?       @relation(fields: [driverId], references: [id])
  routeId             String?       @unique
  route               Route?        @relation(fields: [routeId], references: [id])
  trips               Trip[]
  maintenance         Maintenance[]
  
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  @@index([schoolId])
}

// Route Model
model Route {
  id              String        @id @default(uuid())
  name            String
  description     String?       @db.Text
  startLocation   String
  endLocation     String
  distance        Float?
  estimatedTime   Int?          // in minutes
  stops           String?       @db.Text // JSON string of stops with format [{name, location, sequence, estimatedTime, studentsCount}]
  schedule        String?       @db.Text // JSON string of schedule with format [{title, startTime, endTime, weekdays}]
  
  // School Association
  schoolId        Int?
  school          School?       @relation(fields: [schoolId], references: [id])
  
  // Relations
  busId           String?       // Remove @unique here
  bus             Bus?          @relation()
  trips           Trip[]
  studentTransport StudentTransport[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([schoolId])
}

// Driver Model
model Driver {
  id               String    @id @default(uuid())
  name             String
  licenseNumber    String?   // Made optional as some drivers might not have it yet
  contactNumber    String
  address          String?   @db.Text
  experience       Int       @default(0)
  joiningDate      DateTime
  isActive         Boolean   @default(true)
  photo            String?   @db.Text  // Changed to TEXT to support larger images
  
  // Personal Information
  dateOfBirth      DateTime?
  age              Int?
  gender           String?
  maritalStatus    String?
  emergencyContact String?
  bloodGroup       String?
  qualification    String?
  salary           Float?
  
  // School Association
  schoolId         Int?
  school           School?   @relation(fields: [schoolId], references: [id])
  
  // Relations
  buses            Bus[]
  trips            Trip[]
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  @@index([schoolId])
}

// StudentTransport Model
model StudentTransport {
  id             String    @id @default(uuid())
  studentId      String
  pickupLocation String
  dropLocation   String
  pickupTime     String?
  dropTime       String?
  fee            Float     @default(0)
  
  // Relations
  routeId        String
  route          Route     @relation(fields: [routeId], references: [id], onDelete: Cascade)
  student        Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  @@index([studentId])
  @@index([routeId])
}

// Enum for Trip Status
enum TripStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELED
}

// Enum for Maintenance Status
enum MaintenanceStatus {
  PENDING
  COMPLETED
  OVERDUE
}

// Timetable Model
model Timetable {
  id            String    @id @default(uuid())
  className     String    // Class 1, Class 2, etc.
  section       String    // A, B, C, etc.
  subjectName   String    // Mathematics, Science, etc.
  teacherId     Int       // Changed to Int to match Teacher.id
  day           String    // monday, tuesday, etc.
  startTime     String    // 10:30, 17:27, etc.
  endTime       String    // 11:30, 18:28, etc.
  roomNumber    String?
  
  // School Association
  schoolId      Int       @default(1) // Added default value for existing data
  school        School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  // Relations
  teacher       Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([className, section])
  @@index([teacherId])
  @@index([day])
  @@index([schoolId])
}

// Expense Model for tracking school expenses
model Expense {
  id              String    @id @default(uuid())
  title           String
  description     String?   @db.Text
  category        String    // e.g., "Stationery", "Utilities", "Transport", "Maintenance", "Salary", "Infrastructure"
  subCategory     String?   // More specific categorization
  amount          Float
  expenseDate     DateTime
  paymentMethod   String    @default("Cash") // Cash, Cheque, Bank Transfer, UPI, Credit Card
  vendor          String?   // Name of vendor/supplier
  vendorContact   String?   // Contact number/email of vendor
  invoiceNumber   String?   // Invoice/Bill reference number
  receiptNumber   String?   // Receipt reference number
  taxAmount       Float?    @default(0) // Tax amount if applicable
  discountAmount  Float?    @default(0) // Discount received
  totalAmount     Float     // Final amount paid (amount + tax - discount)
  status          String    @default("PENDING") // PENDING, APPROVED, REJECTED, PAID
  approvedBy      String?   // ID or name of person who approved
  approvedAt      DateTime?
  notes           String?   @db.Text
  attachments     String?   @db.Text // JSON string of file URLs
  
  // School Association
  schoolId        Int?
  school          School?   @relation(fields: [schoolId], references: [id])
  
  // Budget tracking
  budgetCategory  String?   // Link to budget category if applicable
  isRecurring     Boolean   @default(false)
  recurringType   String?   // MONTHLY, QUARTERLY, YEARLY
  parentExpenseId String?   // For recurring expenses, link to parent
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([schoolId])
  @@index([category])
  @@index([expenseDate])
  @@index([status])
}

// Teacher Diary Model for daily classroom entries
model TeacherDiary {
  id               Int       @id @default(autoincrement())
  
  // Core diary entry information
  title            String    // Title of the diary entry
  content          String     // Main content of the diary entry
  date             DateTime  // Date of the entry
  
  // Class and subject information
  className        String    // e.g., "Class 10", "Grade 5"
  section          String    // e.g., "A", "B", "C"
  subject          String    // Subject taught
  period           String?   // Period number or time slot
  
  // Entry type and details
  entryType        DiaryEntryType @default(GENERAL) // Type of entry
  homework         String?   @db.Text // Homework assigned
  classSummary     String?   @db.Text // Summary of what was taught
  notices          String?   @db.Text // Important notices for students/parents
  remarks          String?   @db.Text // Additional teacher remarks
  
  // Visibility and priority
  isPublic         Boolean   @default(true) // Whether visible to students/parents
  priority         DiaryPriority @default(NORMAL) // Priority level
  
  // Attachments and multimedia
  attachments      String?   @db.Text // JSON array of file URLs
  imageUrls        String?   @db.Text // JSON array of image URLs
  
  // School isolation and teacher relation
  schoolId         Int
  school           School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  teacherId        Int
  teacher          Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Indexes for performance
  @@index([schoolId])
  @@index([teacherId])
  @@index([date])
  @@index([className, section])
  @@index([subject])
  @@index([entryType])
  @@unique([teacherId, date, className, section, subject, period]) // Prevent duplicate entries
}

// Enum for diary entry types
enum DiaryEntryType {
  GENERAL         // General class entry
  HOMEWORK        // Homework assignment
  ANNOUNCEMENT    // Important announcement
  ASSESSMENT      // Assessment/test information
  EVENT           // Class event or activity
  NOTICE          // Official notice
  REMINDER        // Reminder for students/parents
}

// Enum for diary entry priority
enum DiaryPriority {
  LOW             // Low priority
  NORMAL          // Normal priority
  HIGH            // High priority
  URGENT          // Urgent priority
}

// Add relation to Teacher model
// (This will be added to the existing Teacher model)
// teacherDiaries   TeacherDiary[] @relation("TeacherDiaryEntries")

// Add relation to School model  
// (This will be added to the existing School model)
// teacherDiaries   TeacherDiary[] @relation("SchoolTeacherDiaries")